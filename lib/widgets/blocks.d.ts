import * as React from 'react';
import { Expr, Variable, LiteralType, EnumValue, AggrStatus, Schema } from 'mwater-expressions';
import { InstanceCtx, DesignCtx } from '../contexts';
import "./blocks.css";
/** Side on which another block is dropped on a block */
export declare enum DropSide {
    top = "Top",
    bottom = "Bottom",
    left = "Left",
    right = "Right"
}
/** Store which permits modification of the block tree */
export interface BlockStore {
    /** Replace block with specified id with either another block or nothing.
     * Optionally removes another id first (for dragging where block should disappear and re-appear somewhere else) */
    alterBlock(blockId: string, action: (blockDef: BlockDef) => BlockDef | null, removeBlockId?: string): void;
    /** Convenience method to alter a single block */
    replaceBlock(blockDef: BlockDef): void;
}
/** Store which throws on any operation */
export declare class NullBlockStore implements BlockStore {
    alterBlock(blockId: string, action: (blockDef: BlockDef) => BlockDef | null): void;
    replaceBlock(blockDef: BlockDef): void;
}
/** Block definition */
export interface BlockDef {
    id: string;
    type: string;
}
export declare type CreateBlock = (blockDef: BlockDef) => Block<BlockDef>;
/** Context variable is a variable which is available to a block and all of its children. Usually row or a rowset */
export interface ContextVar {
    /** Id of context variable */
    id: string;
    /** Name of context variable */
    name: string;
    type: "row" | "rowset" | LiteralType;
    /** table of database (when type = "rowset" or "row" or "id" or "id[]") */
    table?: string;
    /** Enum values when type is "enum" or "enumset" */
    enumValues?: EnumValue[];
}
/** A filter that applies to a particular rowset context variable */
export interface Filter {
    id: string;
    expr: Expr;
    memo?: any;
}
/** Child of a block. Specifies the child block def and also any context variables passed to it */
export interface ChildBlock {
    blockDef: BlockDef;
    contextVars: ContextVar[];
}
export declare abstract class Block<T extends BlockDef> {
    blockDef: T;
    constructor(blockDef: T);
    readonly id: string;
    /** Render the block as it looks in design mode. This may use bootstrap */
    abstract renderDesign(props: DesignCtx): React.ReactElement<any>;
    /** Render a live instance of the block. This may use bootstrap for now */
    abstract renderInstance(props: InstanceCtx): React.ReactElement<any>;
    /** Render an optional property editor for the block. This may use bootstrap */
    renderEditor(designCtx: DesignCtx): React.ReactElement<any> | null;
    /** Get any context variables expressions that this block needs (not including child blocks) */
    getContextVarExprs(contextVar: ContextVar, ctx: DesignCtx | InstanceCtx): Expr[];
    /** Get any context variables expressions that this block needs *including* child blocks. Can be overridden */
    getSubtreeContextVarExprs(contextVar: ContextVar, ctx: DesignCtx | InstanceCtx): Expr[];
    /** Get child blocks. Child blocks or their injected context vars can depend on type of context variables passed in. */
    abstract getChildren(contextVars: ContextVar[]): ChildBlock[];
    /** Determine if block is valid. null means valid, string is error message. Does not validate children */
    abstract validate(designCtx: DesignCtx): string | null;
    /**
     * Processes entire tree, starting at bottom. Allows
     * easy mutation of the tree
     */
    process(createBlock: CreateBlock, action: (self: BlockDef | null) => BlockDef | null): BlockDef | null;
    /**
     * Call action child blocks (if any), replacing with result. Return changed blockDef. Allows easy mutation of the tree
     */
    abstract processChildren(action: (self: BlockDef | null) => BlockDef | null): BlockDef;
    /** Get initial filters generated by this block. Does not include child blocks */
    getInitialFilters(contextVarId: string, instanceCtx: InstanceCtx): Filter[];
    /** Get initial filters generated by this block and any children */
    getSubtreeInitialFilters(contextVarId: string, instanceCtx: InstanceCtx): Filter[];
    /** Canonicalize the block definition. Should be done after operations on the block are completed. Only alter self, not children */
    canonicalize(): BlockDef | null;
    /** Get label to display in designer */
    getLabel(): string;
}
export declare function dropBlock(droppedBlockDef: BlockDef, targetBlockDef: BlockDef, dropSide: DropSide): BlockDef;
/**
 * Find the entire ancestry (root first) of a block with the specified id
 *
 * @param rootBlockDef root block to search in
 * @param createBlock
 * @param blockId block to find
 * @returns array of child blocks, each with information about which context variables were injected by their parent
 */
export declare function findBlockAncestry(rootBlockDef: BlockDef, createBlock: CreateBlock, contextVars: ContextVar[], blockId: string): ChildBlock[] | null;
/** Get the entire tree of blocks from a root, including context variables for each */
export declare function getBlockTree(rootBlockDef: BlockDef, createBlock: CreateBlock, contextVars: ContextVar[]): ChildBlock[];
/** Create the variables as needed by mwater-expressions */
export declare function createExprVariables(contextVar: ContextVar[]): Variable[];
/** Make a duplicate of a block */
export declare function duplicateBlockDef(blockDef: BlockDef, createBlock: CreateBlock): BlockDef;
/** Validates a context variable/expr combo. Null if ok */
export declare function validateContextVarExpr(options: {
    contextVars: ContextVar[];
    schema: Schema;
    contextVarId: string | null;
    expr: Expr;
    types?: LiteralType[];
    aggrStatuses?: AggrStatus[];
    idTable?: string;
    enumValueIds?: string[];
}): string | null;
